scale_fill_viridis_d(option = "H") +
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
# Graphing proportions based on location type and year ----
percent_results %>%
mutate(LocationType = factor(LocationType,
levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", fill = "Year") +
theme_minimal() +
scale_fill_viridis_d(option = "H") +
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
rlang::last_trace()
# Graphing proportions based on location type and year ----
percent_results %>%
mutate(LocationType = factor(LocationType,
levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", fill = "Year") +
theme_minimal() +
scale_color_viridis_d(option = "H") +
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_viridis_d(option = "H") +  # Use scale_color_viridis_d() instead of scale_fill_viridis_d()
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_manual(values = viridis_pal()(n_distinct(percent_results$Year))) +  # Use viridis colors for each year
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_manual(values = year_colors) +  # Assign custom colors for each year
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
year_colors <- c("red", "blue", "green", "orange", "purple", "yellow", "cyan", "magenta", "darkgreen", "darkblue", "darkred", "darkorange")
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_manual(values = year_colors) +  # Assign custom colors for each year
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
year_colors <- c("red", "blue", "green", "orange", "purple", "yellow", "cyan", "magenta", "darkgreen", "darkblue", "darkred", "darkorange". "purple4")
year_colors <- c("red", "blue", "green", "orange", "purple", "yellow", "cyan", "magenta", "darkgreen", "darkblue", "darkred", "darkorange", "purple4")
year_colors <- c("red", "blue", "green", "orange", "purple", "yellow", "cyan", "magenta", "darkgreen", "darkblue", "darkred", "darkorange", "purple4")
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_manual(values = year_colors) +  # Assign custom colors for each year
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
unique_years <- unique(percent_results$Year)
# Define custom colors for each unique year
year_colors <- rainbow(length(unique_years))  # Using rainbow palette as an example
percent_results %>%
mutate(LocationType = factor(LocationType, levels = c("Lake", "Stream"))) %>%
ggplot(aes(x = LocationType, y = percentage, color = as.factor(Year), shape = as.factor(Year))) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Location Type", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Year", shape = "Year") +
theme_minimal() +
scale_color_manual(values = setNames(year_colors, unique_years)) +  # Assign custom colors for each unique year
scale_shape_manual(values = c(16, 17)) +
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
rlang::last_trace()
rlang::last_trace(drop = FALSE)
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, shape = LocationType)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type", shape = "Location Type") +
theme_minimal() +
scale_color_manual(values = c("Lake" = "blue", "Stream" = "red")) +  # Adjust colors as needed
scale_shape_manual(values = c("Lake" = 16, "Stream" = 17)) +  # Adjust shapes as needed
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, shape = LocationType)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type", shape = "Location Type") +
theme_minimal() +
#scale_color_manual(values = c("Lake" = "blue", "Stream" = "red")) +  # Adjust colors as needed
#scale_shape_manual(values = c("Lake" = 16, "Stream" = 17)) +  # Adjust shapes as needed
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
# Save plot to fit in conference poster
ggsave("Year_ggplot.png", plot = last_plot(), width = 10, height = 8, units = "in", dpi = 300)
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
scale_color_manual(values = c("Lake" = "blue", "Stream" = "red")) +  # Adjust colors as needed
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
#scale_color_manual(values = c("Lake" = "blue", "Stream" = "red")) +  # Adjust colors as needed
theme(legend.position = "right", plot.title = element_text(hjust = 0.5))
# Graphing proportions based on location type and year ----
## This is a time series
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14))
# Graphing proportions based on location type and year ----
## This is a time series
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 14),
axis.title = element_text(size = 16))
# Graphing proportions based on location type and year ----
## This is a time series
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 18),
axis.title = element_text(size = 20))
# Graphing proportions based on location type and year ----
## This is a time series
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
# Graphing proportions based on location type and year ----
## This is a time series
percent_results %>%
ggplot(aes(x = as.factor(Year), y = percentage, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
# Save plot to fit in conference poster
ggsave("Year_ggplot.png", plot = last_plot(), width = 10, height = 8, units = "in", dpi = 300)
View(proportion_results)
View(percent_results)
View(ATX_total_streams)
View(ATX_total_streams)
View(ATX_total_streams)
filter(grepl("river|creek|stream", StationName, ignore.case = TRUE))
ATX_total_streams <- data %>%
filter(data$Analyte == "Anatoxin-A, Total") %>%
filter(Result != "NA") %>%
filter(grepl("river|creek|stream", StationName, ignore.case = TRUE))
View(ATX_total_streams)
ATX_total_streams <- data %>%
filter(data$Analyte == "Anatoxin-A, Total") %>%
filter(Result != "NA") %>%
filter(Result >0) %>%
filter(grepl("river|creek|stream", StationName, ignore.case = TRUE))
View(ATX_total_streams)
ATX_total_lakes <- data %>%
filter(data$Analyte == "Anatoxin-A, Total") %>%
filter(Result != "NA") %>%
filter(Result >0) %>%
filter(!grepl("river|creek|stream", StationName, ignore.case = TRUE))
View(ATX_total_lakes)
View(data)
View(ATX_total_lakes)
# Filter out rows with NA values in SampleDate
data <- data %>%
filter(!is.na(SampleDate)) %>%
filter(data$Result != "NA") %>%
filter(data$Result >0) %>%
filter(grepl("river|creek|stream|lake", StationName, ignore.case = TRUE))
# Filter out rows with NA values in SampleDate
data <- data %>%
filter(!is.na(SampleDate)) %>%
filter(data$Result != "NA") %>%
filter(Result >0) %>%
filter(grepl("river|creek|stream|lake", StationName, ignore.case = TRUE))
View(data)
data$Year <- year(mdy(ATX_proportion$SampleDate))
data$Year <- year(mdy(data$SampleDate))
View(data)
# Graphing proportions based on location type and year ----
## This is a time series
data %>%
ggplot(aes(x = as.factor(Year), y = concentration, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
# Graphing proportions based on location type and year ----
## This is a time series
data %>%
ggplot(aes(x = as.factor(Year), y = Result, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
# Filter out rows with NA values in SampleDate
data <- data %>%
filter(!is.na(SampleDate)) %>%
filter(data$Result != "NA") %>%
filter(Result >0) %>%
filter(grepl("river|creek|stream|lake|pond|beach", StationName, ignore.case = TRUE))
ATX_results <- data %>%
mutate(LocationType = case_when(
grepl("stream|creek|river", StationName, ignore.case = TRUE) ~ "Stream",
grepl("lake|pond|beach", StationName, ignore.case = TRUE) ~ "Lake",
TRUE ~ "Other"))
View(ATX_results)
# Graphing proportions based on location type and year ----
## This is a time series
data %>%
ggplot(aes(x = as.factor(Year), y = Result, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "% of Results",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
View(ATX_results)
ATX_results <- data %>%
mutate(LocationType = case_when(
grepl("stream|creek|river", StationName, ignore.case = TRUE) ~ "Stream",
grepl("lake|pond|beach", StationName, ignore.case = TRUE) ~ "Lake",
TRUE ~ "Other"))
View(ATX_results)
View(ATX_results)
# Graphing proportions based on location type and year ----
## This is a time series
ATX_results %>%
ggplot(aes(x = as.factor(Year), y = Result, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "ATX Total (ug/L)",
title = "ATX Results by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
mean_results <- ATX_results %>%
group_by(Year, LocationType) %>%
summerize(mean_result = mean(Result, na.rm = TRUE))
mean_results <- ATX_results %>%
group_by(Year, LocationType) %>%
summerize(mean_results = mean(Result, na.rm = TRUE))
mean_results <- ATX_results %>%
group_by(Year, LocationType) %>%
summarize(mean_results = mean(Result, na.rm = TRUE))
View(mean_results)
mean_results %>%
ggplot(aes(x = as.factor(Year), y = mean_result, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "Mean Result",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
mean_results %>%
ggplot(aes(x = as.factor(Year), y = mean_results, color = LocationType, group = LocationType)) +
geom_line() +
geom_point(size = 3) +
labs(x = "Year", y = "Mean Result",
title = "ATX Streams vs Lakes by Year", color = "Location Type") +
theme_minimal() +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 25),
axis.text = element_text(size = 18),
axis.title = element_text(size = 25))
install.packages("dataRetrieval")
library(dataRetrieval)
siteNumber <- "11519500"
ChoptankInfo <- readNWISsite(siteNumber)
parameterCd <- "00060"
# Raw daily data:
rawDailyData <- readNWISdv(
siteNumber, parameterCd,
"1980-01-01", "2010-01-01"
)
# Raw daily data:
rawDailyData <- readNWISdv(
siteNumber, parameterCd,
"1980-01-01", "2023-01-01"
)
# Raw daily data:
rawDailyData <- readNWISdv(
siteNumber, parameterCd,
"1980-01-01", "2023-01-01"
)
library(ggplot2)
ggplot(data = pCode) +
geom_point(aes(x = ActivityStartDateTime,
y= ResultMeasuredValue))
pCode <- readNWISpCode(parameterCd)
library(ggplot2)
ggplot(data = pCode) +
geom_point(aes(x = ActivityStartDateTime,
y= ResultMeasuredValue))
pjos <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = 30208)
pjos <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "30208")
phos <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "30208")
library(ggplot2)
View(phos)
View(pCode)
phos <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "00660")
library(ggplot2)
ggplot(data = phos) +
geom_point(aes(x = ActivityStartDateTime,
y= ResultMeasuredValue))
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(x= ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year")
phos <- readWQPqw(siteNumbers = "USGS-01631000",
parameterCd = "00660")
library(ggplot2)
ggplot(data = phos) +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue))
theme_dataRetrial_talk <- function(base_family = "serif",
size = 25,
...){
theme_bw(base_family = base_family, ...) +
theme(
plot.title = element_text(size = size),
text = element_text(size = size),
axis.text = element_text(size = size),
plot.margin = unit(c(0.5,0.5,0.5,1), "cm"),
legend.background = element_rect(color = "black",
fill = "transparent")
)
}
dataRetrieval_timeseries_framework <- function(font_size = 25, point_size = 4){
update_geom_defaults("point",
list(size = point_size,
fill = "darkgrey",
color = "darkgrey"))
update_geom_defaults("line",
list(linewidth = 1))
list_out <- list(theme_dataRetrial_talk(size = font_size))
return(c(list_out))
}
unescape_html <- function(str){
fancy_chars <- regmatches(str, gregexpr("&#\\d{3};",str))
unescaped <- xml2::xml_text(xml2::read_html(paste0("<x>", fancy_chars, "</x>")))
fancy_chars <- gsub(pattern = "&#\\d{3};",
replacement = unescaped, x = str)
fancy_chars <- gsub("Â","", fancy_chars)
return(fancy_chars)
}
ggplot(data = phos) +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue))
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year")
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(
x = ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year") +
labs(title = site_info$station_nm,
caption = paste("Data pulled on:", query_date)) +
ylab(ylabel)
View(phos)
site_info <- attr(phos, "siteInfo")
param_info <- attr(phos, "variableInfo")
query_date <- attr(phos, "queryTime")
query_date <- format(query_date, "%B %d, %Y")
ylabel <- paste0(param_info$characteristicName[1],
" [", param_info$param_units[1],
"]")
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(
x = ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year") +
labs(title = site_info$station_nm,
caption = paste("Data pulled on:", query_date)) +
ylab(ylabel)
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year")
ggplot(data = phos) +
dataRetrieval_timeseries_framework() +
geom_point(aes(
x = ActivityStartDateTime,
y = ResultMeasureValue)) +
xlab("Year") +
labs(title = site_info$station_nm,
caption = paste("Data pulled on:", query_date)) +
ylab(ylabel)
View(phos)
phos <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "00660")
discharge <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "00660")
ggplot(data = discharge) +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue))
View(discharge)
discharge <- readWQPqw(siteNumbers = "USGS-11519500",
parameterCd = "30208")
ggplot(data = discharge) +
geom_point(aes(x = ActivityStartDateTime,
y = ResultMeasureValue))
View(discharge)
install.packages("remotes")
# Install packages
install.packages("leaflet.extras")
install.packages("webshot")
library(leaflet)
library(leaflet.providers)
library(leaflet.extras)
library(tidyverse)
library(terra)
library(sf)
# Install packages
install.packages("leaflet.extras")
install.packages("webshot")
library(leaflet)
library(webshot)
webshot::install_phantomjs()
